import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const API_URL = process.env.BACKEND_URL || 'https://yourdomain.com'; // –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π URL

if (!BOT_TOKEN) {
  throw new Error('Missing BOT_TOKEN in .env');
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

bot.onText(/\/start (.+)/, async (msg, match) => {
  const payload = match[1]; // –Ω–∞–ø—Ä–∏–º–µ—Ä: login_abc123
  const chatId = msg.chat.id;
  const user = msg.from;



  console.log(`üöÄ –ü–æ–ª—É—á–µ–Ω payload: ${payload} –æ—Ç ${user.username || user.first_name}`);

  if (!payload.startsWith('login_')) {
    bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞.');
    return;
  }

  const sessionToken = payload.replace('login_', '');

  try {
    const res = await fetch(`${API_URL}/auth/telegram/data`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        sessionToken,
        id: user.id,
        username: user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        photo_url: user.photo_url,
      }),
    });

    if (!res.ok) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
      return;
    }

    bot.sendMessage(chatId, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ backend:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
  }
});
